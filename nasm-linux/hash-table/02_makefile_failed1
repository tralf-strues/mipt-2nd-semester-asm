OptimizationLevel   = -O2
Optimize            = 0
OptimizationVersion = HASH_TABLE_ONLY

ifneq ($(Optimize), 0)
	OptimizationVersion    = CRC32_OPTIMIZED
	OPTIMIZE_AVX_DEFINE    = -DAVX_STRING_OPTIMIZATION
	OPTIMIZE_FIND_DEFINE   = -DOPTIMIZED_FIND
	OPTIMIZE_FIND_ASM_FILE = $(SrcDir)/02_optimize/optimized/optimized_find_avx.s
endif

AllWarnings    = -Wall -Wextra -pedantic
SomeWarnings   = -Wall
LittleWarnings = 
NoWarnings     = 

Linker   = $(OptimizationLevel) -no-pie
Compiler = $(OptimizationLevel) -mavx2 -no-pie -march=native -DDEBUG -DNDEBUG -D$(OptimizationVersion) $(OPTIMIZE_FIND_DEFINE) $(OPTIMIZE_AVX_DEFINE) $(NoWarnings)

SrcDir = src
BinDir = bin
IntDir = $(BinDir)/intermediates
LibDir = libs
VerDir = 02_optimize/failed_1

Libs = $(wildcard $(LibDir)/*.a)
Deps = $(wildcard $(SrcDir)/*.h) $(wildcard $(LibDir)/*.h) .FORCE
Objs = $(IntDir)/$(VerDir)/main_harry_potter.o $(IntDir)/$(VerDir)/html_writer.o $(IntDir)/file_loader.o $(IntDir)/dictionary.o $(IntDir)/hash_table.o $(IntDir)/bucket.o $(IntDir)/hash_functions.o
Exec = 02_failed1.out

$(BinDir)/$(Exec): $(Objs) $(Libs) $(Deps)
	g++ -o $(BinDir)/$(Exec) $(Linker) $(OPTIMIZE_FIND_ASM_FILE) $(Objs) $(Libs) 

$(IntDir)/$(VerDir)/main_harry_potter.o: $(SrcDir)/$(VerDir)/main_harry_potter.cpp $(Deps)
	g++ -o $(IntDir)/$(VerDir)/main_harry_potter.o -c $(SrcDir)/$(VerDir)/main_harry_potter.cpp $(Compiler)

$(IntDir)/$(VerDir)/html_writer.o: $(SrcDir)/$(VerDir)/html_writer.cpp $(Deps)
	g++ -o $(IntDir)/$(VerDir)/html_writer.o -c $(SrcDir)/$(VerDir)/html_writer.cpp $(Compiler)

$(IntDir)/file_loader.o: $(SrcDir)/file_loader.cpp $(Deps)
	g++ -o $(IntDir)/file_loader.o -c $(SrcDir)/file_loader.cpp $(Compiler)

$(IntDir)/dictionary.o: $(SrcDir)/dictionary.cpp $(Deps)
	g++ -o $(IntDir)/dictionary.o -c $(SrcDir)/dictionary.cpp $(Compiler)

$(IntDir)/hash_table.o: $(SrcDir)/hash_table.cpp $(Deps)
	g++ -o $(IntDir)/hash_table.o -c $(SrcDir)/hash_table.cpp $(Compiler)

$(IntDir)/bucket.o: $(SrcDir)/bucket.cpp $(Deps)
	g++ -o $(IntDir)/bucket.o -c $(SrcDir)/bucket.cpp $(Compiler)

$(IntDir)/hash_functions.o: $(SrcDir)/hash_functions.cpp $(Deps)
	g++ -o $(IntDir)/hash_functions.o -c $(SrcDir)/hash_functions.cpp $(Compiler)

.FORCE: